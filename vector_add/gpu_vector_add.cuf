
attributes(global) subroutine vector_add(A, B, C, n)
    implicit none
    integer, intent(in), value :: n
    real, dimension(n), intent(in) :: A, B
    real, dimension(n), intent(out) :: C
    
    integer :: idx
    idx = threadidx%x

    C(idx) = A(idx) + B(idx)
    
end subroutine vector_add


subroutine cuda_check_error(err)
    use cudafor
    implicit none
    integer :: err
    if (err /= cudaSuccess) then
        print *, "CUDA ERROR: ", cudaGetErrorString(err)
        stop
    end if
end subroutine cuda_check_error


program gpu_vector_add
    use cudafor
    implicit none
    integer, parameter :: n = 1000
    real, parameter :: delta = 1e-7
    
    real, dimension(:), allocatable :: A, B, C_gpu, C_cpu
    real, dimension(:), allocatable, device :: dev_A, dev_B, dev_C
    
    integer :: n_blocks, i

    ! allocate on main memory (CPU)
    allocate(A(n), B(n), C_cpu(n), C_gpu(n))
    ! allocate on GPU memory
    allocate(dev_A(n), dev_B(n), dev_C(n))

    ! initialize arrays on CPU
    call random_number(A)
    call random_number(B)

    ! copy data on GPU
    dev_A = A
    call cuda_check_error(cudaMemcpy(dev_B, B, n))
    
    call vector_add<<<1, n>>>(dev_A, dev_B, dev_C, n)
    call cuda_check_error(cudaGetLastError())
    ! sync to check for errors
    call cuda_check_error(cudaDeviceSynchronize())
    C_gpu = dev_C
    ! sync to ensure copy is completed
    call cuda_check_error(cudaDeviceSynchronize())
    
    ! perform the same computation on CPU
    C_cpu = A + B
    ! test correctness
    do i = 1, n
        if(abs(C_gpu(i) - C_cpu(i)) >= delta) then
            print *, "Test results are not correct."
            stop
        end if
    end do

    deallocate (A, B, C_cpu, C_gpu, dev_A, dev_B, dev_C)
    print *, "All good."
end program gpu_vector_add
