module cuda_matrix_transpose
    use cudafor
    implicit none
    
    contains

    attributes(global) subroutine matrix_transpose(A, m, n, A_trans)
        implicit none
        integer, intent(in), value :: m, n
        real, dimension(0:n * m - 1), intent(in) :: A
        real, dimension(0:n * m - 1), intent(out) :: A_trans
        
        integer :: idx_in, idx_trans, row, col
        idx_in = (blockidx%x - 1) * blockdim%x + threadidx%x - 1
        if (idx_in < n * m) then
            row = mod(idx_in, m)
            col = idx_in/ m
            idx_trans = row * n + col
            A_trans(idx_trans) = A(idx_in)
        end if
    end subroutine matrix_transpose



    subroutine cuda_check_error(err)
        use cudafor
        implicit none
        integer :: err
        if (err /= cudaSuccess) then
            print *, "CUDA ERROR: ", cudaGetErrorString(err)
            stop
        end if
    end subroutine cuda_check_error

    subroutine matrix_transpose_driver(A, m, n, A_trans)
        implicit none
        integer, intent(in) :: n, m
        real, dimension(n * m), intent(in) :: A
        real, dimension(n * m), intent(out) :: A_trans
        real, dimension(:), allocatable, device :: dev_A, dev_A_trans
        integer, parameter :: n_threads = 1024
        integer :: n_blocks
        type(cudaEvent) :: start, stop
        real :: elapsed

        call cuda_check_error(cudaEventCreate(start))
        call cuda_check_error(cudaEventCreate(stop))
        
        allocate(dev_A(n * m), dev_A_trans(n * m))
        dev_A = A
        n_blocks = (n * m + n_threads - 1) / n_threads
        call cuda_check_error(cudaEventRecord(start, 0))
        call matrix_transpose<<<n_blocks, n_threads>>>(dev_A, m, n, dev_A_trans)
        call cuda_check_error(cudaGetLastError())
        call cuda_check_error(cudaEventRecord(stop, 0))
        A_trans = dev_A_trans
        call cuda_check_error(cudaDeviceSynchronize())
        call cuda_check_error(cudaEventElapsedTime(elapsed, start, stop))       
        print '("CUDA kernel elapsed time: ", f6.3, "s")', elapsed / 1000.0
        deallocate(dev_A(n), dev_A_trans(n))
        call cuda_check_error(cudaEventDestroy(start))
        call cuda_check_error(cudaEventDestroy(stop))
    end subroutine matrix_transpose_driver

end module cuda_matrix_transpose


program gpu_matrix_transpose
    use cuda_matrix_transpose
    implicit none
    call test_correctness()
    print *, "correctness: all good."
    call test_performance(1000, 1000)

contains

    subroutine test_correctness()
        implicit none
        integer, parameter :: n = 3, m = 3
        real, dimension(n * m) :: A, A_check, result

        A = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        A_check = [1, 4, 7, 2, 5, 8, 3, 6, 9]
        
        call matrix_transpose_driver(A, m, n, result)
        if ( count(result /= A_check) > 0) then
            print *, "Did not pass correctness test."
            stop
        end if
    end subroutine test_correctness

    subroutine cpu_transpose(A, m, n, A_trans)
        implicit none
        integer, intent(in) :: m, n
        real, dimension(0: m * n - 1), intent(in) :: A
        real, dimension(0: m * n - 1), intent(out) :: A_trans
        integer :: row, col

        do col = 0, n - 1
            do row = 0, m - 1
                A_trans(row * n + col) = A(col * m + row)
            end do
        end do
    end subroutine cpu_transpose

    subroutine test_performance(m, n)
        implicit none
        integer, intent(in) :: m, n
        real, dimension(:), allocatable :: A, A_trans, gpu_result
        real :: time_start, time_finish

        allocate(A(n * m), A_trans(n * m),  gpu_result(n * m))

        call random_number(A)

        ! run on gpu
        call cpu_time(time_start)
        call matrix_transpose_driver(A, m, n, gpu_result)
        call cpu_time(time_finish)
        print '("matrix_transpose_driver execution time: ", f6.3, "s")', time_finish - time_start

        ! run on cpu
        call cpu_time(time_start)
        call cpu_transpose(A, m, n, A_trans)
        call cpu_time(time_finish)
        print '("CPU matrix transpose execution time: ", f10.3, "s")', time_finish - time_start
        
       
        if(count(A_trans /= gpu_result)>0) then
            print *, "Performance test results are not correct."
            stop
        end if
        deallocate(A, A_trans, gpu_result)
    end subroutine test_performance

end program gpu_matrix_transpose
